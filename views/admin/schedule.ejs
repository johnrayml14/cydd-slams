<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Home - SLAMS</title>
    <link rel="stylesheet" href="/styles/adminHome.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap" rel="stylesheet">
<style>

/* Add this to your CSS */
.sport-card {
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
}

/* REMOVED the problematic rule that was preventing clicks */
/* .sport-card * {
    pointer-events: none;
} */

.schedule-container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
    background: #f8f9fa;
    min-height: 100vh;
}

/* Fixed color for main headings */
.schedule-container h2,
.schedule-container h3 {
    color: #333 !important;
    font-weight: 700;
}

.schedule-container h2 {
    font-size: 2.2rem;
    border-bottom: 3px solid #007bff;
    padding-bottom: 12px;
    margin-bottom: 25px;
    background: linear-gradient(135deg, #007bff, #0056b3);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-align: center;
}

.schedule-container h3 {
    font-size: 1.6rem;
    margin-bottom: 20px;
    color: #444 !important;
    padding-left: 10px;
    border-left: 4px solid #007bff;
}

.events-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.event-card {
    background: white;
    border-radius: 12px;
    padding: 25px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid #e0e0e0;
    position: relative;
    overflow: hidden;
}

.event-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 5px;
    height: 100%;
    background: linear-gradient(to bottom, #007bff, #0056b3);
}

.event-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.event-card h4 {
    color: #333;
    margin-bottom: 12px;
    font-size: 1.3rem;
    font-weight: 600;
}

.event-card p {
    color: #666;
    margin: 8px 0;
    display: flex;
    align-items: center;
    gap: 8px;
}

.event-card i {
    color: #007bff;
    width: 16px;
}

.sports-section, .teams-section, .bracket-section, .matches-section {
    display: none;
    margin-top: 30px;
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    border: 1px solid #e0e0e0;
}

.sports-grid, .teams-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.sport-card, .team-card {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    cursor: pointer;
    border: 2px solid transparent;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.sport-card:hover, .team-card:hover {
    background: #e9ecef;
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.sport-card.selected, .team-card.selected {
    border-color: #007bff;
    background: #e3f2fd;
    box-shadow: 0 4px 12px rgba(0,123,255,0.2);
}

.sport-card h5, .team-card h5 {
    color: #333;
    margin-bottom: 10px;
    font-size: 1.1rem;
    font-weight: 600;
}

.sport-card small, .team-card p {
    color: #666;
    font-size: 0.9rem;
}

.bracket-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.bracket-option {
    padding: 25px;
    background: #f8f9fa;
    border-radius: 10px;
    text-align: center;
    cursor: pointer;
    border: 2px solid transparent;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.bracket-option:hover {
    background: #e9ecef;
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.bracket-option.selected {
    border-color: #007bff;
    background: #e3f2fd;
    box-shadow: 0 4px 12px rgba(0,123,255,0.2);
}

.bracket-option h4 {
    color: #333;
    margin-bottom: 12px;
    font-size: 1.2rem;
}

.bracket-option p {
    color: #666;
    font-size: 0.9rem;
}

.matches-container {
    margin-top: 30px;
}

.matches-container h4 {
    color: #333;
    font-size: 1.4rem;
    margin-bottom: 20px;
    padding-bottom: 12px;
    border-bottom: 2px solid #007bff;
}

.round {
    margin-bottom: 35px;
}

.round-header {
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: white;
    padding: 15px 25px;
    border-radius: 10px;
    margin-bottom: 25px;
    font-weight: bold;
    font-size: 1.2rem;
    box-shadow: 0 4px 10px rgba(0,0,0,0.15);
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.round-header i {
    margin-right: 10px;
}

.match-card {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 25px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    position: relative;
}

.match-card:hover {
    box-shadow: 0 6px 20px rgba(0,0,0,0.12);
    transform: translateY(-3px);
}

.teams-display {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 10px;
    border: 1px solid #e9ecef;
}

.team {
    flex: 1;
    text-align: center;
    padding: 12px;
    font-weight: 600;
    color: #333;
    font-size: 1.1rem;
}

.vs {
    margin: 0 15px;
    font-weight: bold;
    color: #666;
    background: #fff;
    padding: 8px 15px;
    border-radius: 20px;
    border: 1px solid #ddd;
    font-size: 0.9rem;
}

.match-card p {
    color: #555;
    margin: 10px 0;
    font-size: 0.95rem;
}

.match-card p strong {
    color: #28a745;
    font-weight: 600;
}

.match-actions {
    display: flex;
    gap: 12px;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.btn {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

.btn-primary {
    background: #007bff;
    color: white;
}

.btn-primary:hover {
    background: #0056b3;
}

.btn-success {
    background: #28a745;
    color: white;
}

.btn-success:hover {
    background: #1e7e34;
}

.btn-secondary {
    background: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background: #545b62;
}

.btn-info {
    background: #17a2b8;
    color: white;
}

.btn-info:hover {
    background: #138496;
}

.btn-warning {
    background: #ffc107;
    color: #000;
}

.btn-warning:hover {
    background: #e0a800;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    backdrop-filter: blur(5px);
}

.modal-content {
    background-color: white;
    margin: 5% auto;
    padding: 35px;
    border-radius: 15px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 15px 40px rgba(0,0,0,0.3);
    position: relative;
    animation: modalFadeIn 0.3s ease;
}

@keyframes modalFadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
}

.modal-content h3 {
    color: #333;
    margin-bottom: 25px;
    font-size: 1.5rem;
    border-bottom: 2px solid #007bff;
    padding-bottom: 12px;
}

.form-group {
    margin-bottom: 25px;
}

.form-group label {
    display: block;
    margin-bottom: 10px;
    font-weight: 600;
    color: #333;
}

.form-group input, .form-group select {
    width: 100%;
    padding: 14px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.3s ease;
}

.form-group input:focus, .form-group select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
}

.form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 30px;
}

.alert {
    padding: 15px 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-weight: 500;
}

.existing-brackets {
    margin: 20px 0;
    padding: 20px;
    background: #e8f4ff;
    border-radius: 10px;
    border-left: 4px solid #007bff;
}

.bracket-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.bracket-item {
    background: white;
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #ddd;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.bracket-item:hover {
    border-color: #007bff;
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.bracket-item h5 {
    color: #333;
    margin-bottom: 10px;
    font-size: 1.1rem;
}

.bracket-item p {
    color: #666;
    margin: 5px 0;
    font-size: 0.9rem;
}

.debug-tools {
    margin-top: 25px;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 10px;
    border-left: 4px solid #ffc107;
}

.debug-tools h4 {
    color: #333;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 10px;
}

/* Ensure text readability */
.schedule-container * {
    color: inherit;
}

/* Fix for any inherited white text */
.matches-section,
.matches-section h3,
.matches-section h4,
.matches-section p,
.matches-section .team,
.matches-section .vs {
    color: #333 !important;
}

/* Responsive design */
@media (max-width: 768px) {
    .events-grid,
    .sports-grid,
    .teams-grid,
    .bracket-options,
    .bracket-list {
        grid-template-columns: 1fr;
    }
    
    .teams-display {
        flex-direction: column;
        gap: 15px;
    }
    
    .vs {
        margin: 10px 0;
    }
    
    .match-actions {
        flex-direction: column;
    }
    
    .form-actions {
        flex-direction: column;
    }
    
    .schedule-container h2 {
        font-size: 1.8rem;
    }
    
    .schedule-container h3 {
        font-size: 1.4rem;
    }
    
    .modal-content {
        padding: 25px;
        margin: 10% auto;
    }
}
</style>
</head>
<body>
    <!-- Sidebar Menu -->
    <div id="mySidebar" class="sidebar">
        <a href="/admin/home" class="active"><i class="fas fa-home"></i> Home</a>
        <a href="/admin/posts" ><i class="fas fa-newspaper"></i> Posts</a>
        <a href="/admin/events"><i class="fas fa-calendar-alt"></i> Events</a>
        <a href="/admin/schedule"><i class="fas fa-calendar-day"></i> Schedule</a>
        <a href="/admin/coach"><i class="fas fa-chalkboard-teacher"></i> Coordinator Request</a>
        <!-- Team dropdown section -->
        <a href="javascript:void(0);" class="team-dropdown-btn"><i class="fas fa-users-cog"></i> Teams</a>
        <div class="team-dropdown-content">
            <a href="/admin/team-request"><i class="fas fa-users"></i> Team Request</a>
            <a href="/admin/registered-team"><i class="fas fa-landmark"></i> All Team</a>
        </div>
        <a href="/admin/users"><i class="fas fa-users"></i> Players</a>
        <a href="/admin/event-history"><i class="fas fa-history"></i> Event History</a>
    </div>
    <!-- Sidebar toggle button -->
    <span class="sidebar-btn" onclick="toggleNav()">&#9776;</span>
    
    <header class="header" style="display: flex; justify-content: space-between; align-items: center;">
        <div class="logo">
            <a href="/admin/home" style="text-decoration: none;">
                <img src="/images/cityYouth.jpg" alt="SLAMS Logo">
            </a>
            <span class="slams-title">CYSDD</span>
        </div>
        <!-- Container for bell and user profile -->
        <div style="display: flex; align-items: center; gap: 20px;">
            <!-- Admin Profile -->
            <div class="user-profile" style="position: relative;" id="adminProfileContainer">
                <% if (admin && admin.profilePic) { %>
                    <img src="<%= admin.profilePic %>" 
                        alt="Admin Profile" 
                        style="width: 35px; height: 35px; border-radius: 50%; border: 2px solid #007bff; object-fit: cover;">
                <% } else { %>
                    <i class="fas fa-user-shield" style="font-size: 22px; color: white;"></i>
                <% } %>
                <div class="dropdown-content" id="adminDropdownMenu" style="display: none;">
                    <a href="/admin/adminProfile">
                        <i class="fas fa-cogs" style="margin-right: 8px;"></i> Admin
                    </a>
                    <a href="javascript:void(0);" class="logout-btn" onclick="showLogoutModal()">
                        <i class="fas fa-sign-out-alt" style="margin-right: 8px;"></i> Log Out
                    </a>
                </div>
            </div>
        </div>
    </header>
                
    <main class="schedule-container">
        <h2>Tournament Schedule Management</h2>

        <!-- Events Section -->
        <section id="eventsSection">
            <h3>Select an Event</h3>
            <div class="events-grid" id="eventsGrid">
                <% events.forEach(event => { %>
                    <div class="event-card" data-event-id="<%= event.id %>" data-event-title="<%= event.title %>">
                        <h4><%= event.title %></h4>
                        <p><i class="fas fa-calendar-alt"></i> <%= event.date_schedule %></p>
                        <p><i class="fas fa-map-marker-alt"></i> <%= event.location %></p>
                    </div>
                <% }); %>
            </div>
        </section>

        <!-- Sports Section -->
        <section id="sportsSection" class="sports-section">
            <h3>Select Sport Type for <span id="selectedEventTitle"></span></h3>
            <div class="sports-grid" id="sportsGrid"></div>
        </section>

        <!-- Teams Section -->
        <section id="teamsSection" class="teams-section">
            <h3>Select Teams for <span id="selectedSportTitle"></span></h3>
            <div id="existingBracketsSection" class="existing-brackets" style="display: none;">
                <h4><i class="fas fa-trophy"></i> Existing Tournament Brackets</h4>
                <div id="bracketList" class="bracket-list"></div>
                <div style="margin-top: 15px;">
                    <button id="createNewBracket" class="btn btn-info">
                        <i class="fas fa-plus"></i> Create New Bracket
                    </button>
                </div>
            </div>
            <div id="teamsSelectionSection">
                <div class="teams-grid" id="teamsGrid"></div>
                <button id="proceedToBracket" class="btn btn-primary" style="margin-top: 20px;">Proceed to Bracket Creation</button>
            </div>
        </section>

        <!-- Bracket Creation Section -->
        <section id="bracketSection" class="bracket-section">
            <h3>Create Tournament Bracket</h3>
            <div class="bracket-options">
                <div class="bracket-option" data-bracket-type="single_elimination">
                    <h4>Single Elimination</h4>
                    <p>Teams compete until they lose</p>
                </div>
                <div class="bracket-option" data-bracket-type="round_robin">
                    <h4>Round Robin</h4>
                    <p>All teams play each other</p>
                </div>
            </div>
            <button id="createBracket" class="btn btn-success" style="margin-top: 20px;">Create Bracket</button>
        </section>

        <!-- Matches Display Section -->
        <section id="matchesSection" class="matches-section" style="display: none;">
            <h3>Tournament Matches</h3>
            <div id="matchesContainer" class="matches-container"></div>
            
            <!-- Debug Tools Section -->
            <div class="debug-tools">
                <h4><i class="fas fa-tools"></i> Tournament Tools</h4>
                <div style="display: flex; gap: 10px; flex-wrap: wrap; margin-top: 10px;">
                    <button id="manualNextRound" class="btn btn-warning">
                        <i class="fas fa-forward"></i> Generate Next Round
                    </button>
                    <button id="checkRoundCompletion" class="btn btn-info">
                        <i class="fas fa-check-circle"></i> Check Round Completion
                    </button>
                    <button id="setChampion" class="btn btn-success">
                        <i class="fas fa-trophy"></i> Set Champion
                    </button>
                </div>
            </div>
            
            <!-- Navigation buttons -->
            <div style="margin-top: 20px; display: flex; gap: 10px; flex-wrap: wrap;">
                <button id="backToSports" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Sports
                </button>
                <button id="backToBrackets" class="btn btn-info" style="display: none;">
                    <i class="fas fa-list"></i> Back to Brackets List
                </button>
                <button id="createAnotherBracket" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Create Another Bracket
                </button>
            </div>
        </section>
    </main>

    <!-- Schedule Modals -->
    <div id="scheduleModal" class="modal">
        <div class="modal-content">
            <h3>Schedule Match</h3>
            <form id="scheduleForm">
                <input type="hidden" id="scheduleMatchId">
                <div class="form-group">
                    <label for="matchDate">Date & Time:</label>
                    <input type="datetime-local" id="matchDate" required>
                </div>
                <div class="form-group">
                    <label for="venue">Venue:</label>
                    <input type="text" id="venue" required>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save Schedule</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('scheduleModal')">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <div id="resultModal" class="modal">
        <div class="modal-content">
            <h3>Update Match Result</h3>
            <form id="resultForm">
                <input type="hidden" id="resultMatchId">
                <div class="form-group">
                    <label id="team1Name"></label>
                    <input type="number" id="team1Score" min="0" required>
                </div>
                <div class="form-group">
                    <label id="team2Name"></label>
                    <input type="number" id="team2Score" min="0" required>
                </div>
                <div class="form-group">
                    <label>Winner:</label>
                    <select id="winnerTeam" required>
                        <option value="">Select Winner</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-success">Save Result</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('resultModal')">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal for logout confirmation -->
     <div id="logoutModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="hideLogoutModal()">&times;</button>
            <h3>Are you sure you want to log out?</h3>
            <div class="modal-buttons">
                <button id="confirmLogout" class="confirm-btn">Confirm</button>
                <button id="cancelLogout" class="cancel-btn">Cancel</button>
            </div>
        </div>
    
    <script>
        let selectedEvent = null;
        let selectedSport = null;
        let selectedTeams = [];
        let selectedBracketType = null;
        let currentBracketId = null;
        let existingBrackets = [];

        // Event selection
        document.querySelectorAll('.event-card').forEach(card => {
            card.addEventListener('click', function() {
                selectedEvent = {
                    id: this.dataset.eventId,
                    title: this.dataset.eventTitle
                };
                
                document.getElementById('selectedEventTitle').textContent = this.dataset.eventTitle;
                loadSports(this.dataset.eventId);
            });
        });

        // Load sports for selected event - FIXED VERSION
async function loadSports(eventId) {
    try {
        console.log('Loading sports for event ID:', eventId);
        const response = await fetch(`/admin/schedule/event/${eventId}/sports`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        console.log('Sports data received:', data);
        
        const sportsGrid = document.getElementById('sportsGrid');
        sportsGrid.innerHTML = '';
        
        if (!data.sports || data.sports.length === 0) {
            sportsGrid.innerHTML = '<p>No sports available for this event.</p>';
            return;
        }
        
        data.sports.forEach(sport => {
            console.log('Processing sport:', sport);
            const sportCard = document.createElement('div');
            sportCard.className = 'sport-card';
            sportCard.innerHTML = `
                <h5>${sport.name}</h5>
                <small>${sport.type.charAt(0).toUpperCase() + sport.type.slice(1).replace('_', ' ')}</small>
            `;
            sportCard.dataset.sportType = sport.type;
            sportCard.dataset.sportName = sport.name;
            
            // ADDED direct event listener to each sport card
            sportCard.addEventListener('click', function() {
                console.log('Sport card clicked:', this.dataset);
                
                // Remove selection from all cards
                document.querySelectorAll('.sport-card').forEach(c => c.classList.remove('selected'));
                
                // Add selection to clicked card
                this.classList.add('selected');
                
                selectedSport = {
                    type: this.dataset.sportType,
                    name: this.dataset.sportName
                };
                
                console.log('Selected sport:', selectedSport);
                console.log('Current event:', selectedEvent);
                
                // Proceed to next step
                checkExistingBrackets(selectedEvent.id, selectedSport.type, selectedSport.name);
            });
            
            sportsGrid.appendChild(sportCard);
        });
        
        document.getElementById('sportsSection').style.display = 'block';
        document.getElementById('eventsSection').style.display = 'none';
        
    } catch (error) {
        console.error('Error loading sports:', error);
        alert('Error loading sports: ' + error.message);
    }
}

        // Check if brackets already exist for this sport - FIXED VERSION
        async function checkExistingBrackets(eventId, sportType, sportName) {
            try {
                console.log(`Checking existing brackets for event ${eventId}, sport: ${sportName}`);
                const response = await fetch(`/admin/schedule/event/${eventId}/brackets`);
                const data = await response.json();
                
                console.log('All brackets data:', data.brackets);
                
                // Filter brackets by sport name - FIXED COMPARISON
                existingBrackets = data.brackets.filter(bracket => {
                    const matches = bracket.sport_type && bracket.sport_type.toLowerCase() === sportName.toLowerCase();
                    console.log(`Comparing: "${bracket.sport_type}" with "${sportName}" -> ${matches}`);
                    return matches;
                });
                
                console.log('Filtered existing brackets:', existingBrackets);
                
                if (existingBrackets.length > 0) {
                    showExistingBrackets(eventId, sportType, sportName);
                } else {
                    console.log('No existing brackets found, loading teams...');
                    loadTeams(eventId, sportType, sportName);
                }
            } catch (error) {
                console.error('Error checking existing brackets:', error);
                // If there's an error, proceed to load teams
                console.log('Error occurred, loading teams as fallback...');
                loadTeams(eventId, sportType, sportName);
            }
        }

        // Show existing brackets
        function showExistingBrackets(eventId, sportType, sportName) {
            const bracketList = document.getElementById('bracketList');
            bracketList.innerHTML = '';
            
            existingBrackets.forEach(bracket => {
                const bracketItem = document.createElement('div');
                bracketItem.className = 'bracket-item';
                bracketItem.innerHTML = `
                    <h5>${bracket.bracket_type.replace('_', ' ').toUpperCase()} Bracket</h5>
                    <p><strong>Status:</strong> ${bracket.is_completed ? 'Completed' : 'In Progress'}</p>
                    <p><strong>Current Round:</strong> ${bracket.current_round || 1}</p>
                    ${bracket.champion_name ? `<p><strong>Champion:</strong> ${bracket.champion_name}</p>` : ''}
                    <p><strong>Created:</strong> ${new Date(bracket.created_at).toLocaleDateString()}</p>
                `;
                
                bracketItem.addEventListener('click', function() {
                    loadExistingBracket(bracket.id);
                });
                
                bracketList.appendChild(bracketItem);
            });
            
            document.getElementById('existingBracketsSection').style.display = 'block';
            document.getElementById('teamsSelectionSection').style.display = 'none';
            document.getElementById('selectedSportTitle').textContent = sportName;
            document.getElementById('teamsSection').style.display = 'block';
            document.getElementById('sportsSection').style.display = 'none';
        }

        // Load existing bracket matches
        async function loadExistingBracket(bracketId) {
            currentBracketId = bracketId;
            await loadBracketMatches(bracketId);
            document.getElementById('backToBrackets').style.display = 'block';
        }

        // Load teams for selected event and sport - FIXED VERSION
        async function loadTeams(eventId, sportType, sportName) {
            try {
                console.log(`Loading teams for event ${eventId}, sport type: ${sportType}`);
                const response = await fetch(`/admin/schedule/event/${eventId}/sport/${sportType}/teams`);
                const data = await response.json();
                
                console.log('Teams data received:', data);
                
                const teamsGrid = document.getElementById('teamsGrid');
                teamsGrid.innerHTML = '';
                
                if (!data.teams || data.teams.length === 0) {
                    teamsGrid.innerHTML = '<p>No teams registered for this sport.</p>';
                    return;
                }
                
                data.teams.forEach(team => {
                    const teamCard = document.createElement('div');
                    teamCard.className = 'team-card';
                    teamCard.innerHTML = `
                        <h5>${team.teamName}</h5>
                        <p>Coach: ${team.coach_name || 'N/A'}</p>
                        <p>Organization: ${team.organization || 'N/A'}</p>
                    `;
                    teamCard.dataset.teamId = team.id;
                    teamCard.dataset.teamName = team.teamName;
                    
                    teamCard.addEventListener('click', function() {
                        this.classList.toggle('selected');
                        const teamId = this.dataset.teamId;
                        
                        if (this.classList.contains('selected')) {
                            selectedTeams.push({
                                id: teamId,
                                name: this.dataset.teamName
                            });
                        } else {
                            selectedTeams = selectedTeams.filter(team => team.id !== teamId);
                        }
                        
                        // Update button text with count
                        const proceedBtn = document.getElementById('proceedToBracket');
                        proceedBtn.textContent = `Proceed to Bracket Creation (${selectedTeams.length} teams selected)`;
                    });
                    
                    teamsGrid.appendChild(teamCard);
                });
                
                document.getElementById('existingBracketsSection').style.display = 'none';
                document.getElementById('teamsSelectionSection').style.display = 'block';
                document.getElementById('selectedSportTitle').textContent = sportName;
                document.getElementById('teamsSection').style.display = 'block';
                document.getElementById('sportsSection').style.display = 'none';
            } catch (error) {
                console.error('Error loading teams:', error);
                alert('Error loading teams: ' + error.message);
            }
        }

        // Create new bracket button
        document.getElementById('createNewBracket')?.addEventListener('click', function() {
            document.getElementById('existingBracketsSection').style.display = 'none';
            document.getElementById('teamsSelectionSection').style.display = 'block';
        });

        // Proceed to bracket creation
        document.getElementById('proceedToBracket').addEventListener('click', function() {
            if (selectedTeams.length < 2) {
                alert('Please select at least 2 teams');
                return;
            }
            
            document.getElementById('bracketSection').style.display = 'block';
            document.getElementById('teamsSection').style.display = 'none';
            
            // Reset bracket selection
            document.querySelectorAll('.bracket-option').forEach(o => o.classList.remove('selected'));
            selectedBracketType = null;
        });

        // Bracket type selection
        document.querySelectorAll('.bracket-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.bracket-option').forEach(o => o.classList.remove('selected'));
                this.classList.add('selected');
                selectedBracketType = this.dataset.bracketType;
                console.log('Selected bracket type:', selectedBracketType);
            });
        });

        // Create bracket
        document.getElementById('createBracket').addEventListener('click', async function() {
            if (!selectedBracketType) {
                alert('Please select a bracket type');
                return;
            }

            if (selectedTeams.length < 2) {
                alert('Please select at least 2 teams');
                return;
            }

            try {
                const teamIds = selectedTeams.map(team => team.id);
                
                console.log('Creating bracket with data:', {
                    eventId: selectedEvent.id,
                    sportType: selectedSport.type,
                    sportName: selectedSport.name,
                    bracketType: selectedBracketType,
                    teams: teamIds
                });
                
                const response = await fetch('/admin/schedule/create-bracket', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        eventId: selectedEvent.id,
                        sportType: selectedSport.type,
                        sportName: selectedSport.name,
                        bracketType: selectedBracketType,
                        teams: teamIds
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    currentBracketId = data.bracketId;
                    alert('Bracket created successfully!');
                    loadBracketMatches(data.bracketId);
                } else {
                    alert('Error creating bracket: ' + data.error);
                }
            } catch (error) {
                console.error('Error creating bracket:', error);
                alert('Error creating bracket: ' + error.message);
            }
        });

        // Load bracket matches
        async function loadBracketMatches(bracketId) {
            try {
                console.log(`Loading matches for bracket ${bracketId}`);
                const response = await fetch(`/admin/schedule/bracket/${bracketId}/matches`);
                const data = await response.json();
                
                console.log('Matches data:', data.matches);
                console.log('Bracket data:', data.bracket);
                
                displayMatches(data.matches, data.bracket);
                document.getElementById('matchesSection').style.display = 'block';
                document.getElementById('bracketSection').style.display = 'none';
                document.getElementById('teamsSection').style.display = 'none';
            } catch (error) {
                console.error('Error loading matches:', error);
                alert('Error loading matches');
            }
        }

        // Display matches
        function displayMatches(matches, bracket) {
            const container = document.getElementById('matchesContainer');
            container.innerHTML = `
                <div style="background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.08);">
                    <h4 style="color: #333; margin: 0; font-size: 1.4rem;">${bracket.event_name} - ${bracket.sport_type}</h4>
                    <p style="color: #666; margin: 5px 0 0 0; font-size: 1rem;">Bracket Type: ${bracket.bracket_type.replace('_', ' ').toUpperCase()}</p>
                    <p style="color: #666; margin: 5px 0 0 0; font-size: 1rem;">Status: ${bracket.is_completed ? 'Completed' : 'In Progress'} | Current Round: ${bracket.current_round || 1}</p>
                    ${bracket.champion_name ? `<p style="color: #28a745; margin: 5px 0 0 0; font-size: 1rem; font-weight: 600;"><i class="fas fa-trophy"></i> Champion: ${bracket.champion_name}</p>` : ''}
                </div>
            `;
            
            // Group matches by round
            const rounds = {};
            matches.forEach(match => {
                if (!rounds[match.round_number]) {
                    rounds[match.round_number] = [];
                }
                rounds[match.round_number].push(match);
            });
            
            // Display each round
            Object.keys(rounds).forEach(roundNumber => {
                const roundDiv = document.createElement('div');
                roundDiv.className = 'round';
                roundDiv.innerHTML = `<div class="round-header"><i class="fas fa-flag"></i> Round ${roundNumber}</div>`;
                
                rounds[roundNumber].forEach(match => {
                    const matchCard = document.createElement('div');
                    matchCard.className = 'match-card';
                    
                    // Format date if available
                    let dateInfo = '';
                    if (match.match_date) {
                        const matchDate = new Date(match.match_date);
                        dateInfo = `
                            <div style="background: #e8f4ff; padding: 10px; border-radius: 6px; margin: 10px 0;">
                                <p style="margin: 0; color: #0066cc; font-weight: 600;">
                                    <i class="fas fa-calendar"></i> ${matchDate.toLocaleDateString()} 
                                    <i class="fas fa-clock" style="margin-left: 15px;"></i> ${matchDate.toLocaleTimeString()}
                                </p>
                                ${match.venue ? `<p style="margin: 5px 0 0 0; color: #004d99;"><i class="fas fa-map-marker-alt"></i> ${match.venue}</p>` : ''}
                            </div>
                        `;
                    }
                    
                    // Winner info if available
                    let winnerInfo = '';
                    if (match.winner_name) {
                        winnerInfo = `
                            <div style="background: #d4edda; padding: 10px; border-radius: 6px; margin: 10px 0;">
                                <p style="margin: 0; color: #155724; font-weight: 600;">
                                    <i class="fas fa-trophy"></i> Winner: ${match.winner_name}
                                    ${match.team1_score !== null ? ` (${match.team1_score}-${match.team2_score})` : ''}
                                </p>
                            </div>
                        `;
                    }
                    
                    matchCard.innerHTML = `
                        <div class="teams-display">
                            <div class="team">${match.team1_name || 'TBD'}</div>
                            <div class="vs">VS</div>
                            <div class="team">${match.team2_name || 'TBD'}</div>
                        </div>
                        ${dateInfo}
                        ${winnerInfo}
                        <div class="match-actions">
                            <button class="btn btn-primary" onclick="openScheduleModal(${match.id}, '${match.team1_name || 'TBD'}', '${match.team2_name || 'TBD'}')">
                                <i class="fas fa-calendar-plus"></i> Schedule
                            </button>
                            <button class="btn btn-success" onclick="openResultModal(${match.id}, ${match.team1_id}, '${match.team1_name || 'TBD'}', ${match.team2_id}, '${match.team2_name || 'TBD'}')">
                                <i class="fas fa-flag-checkered"></i> Set Result
                            </button>
                        </div>
                    `;
                    roundDiv.appendChild(matchCard);
                });
                
                container.appendChild(roundDiv);
            });
        }

        // Manual next round generation
        document.getElementById('manualNextRound')?.addEventListener('click', async function() {
            if (!currentBracketId) {
                alert('No bracket selected');
                return;
            }

            try {
                // Get current bracket info to determine current round
                const response = await fetch(`/admin/schedule/bracket/${currentBracketId}/matches`);
                const data = await response.json();
                
                const currentRound = data.bracket.current_round;
                const matches = data.matches;
                
                // Find the highest round number in matches
                const maxRound = Math.max(...matches.map(m => m.round_number));
                
                const roundToUse = currentRound || maxRound;
                
                const nextRoundResponse = await fetch('/admin/schedule/generate-next-round', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        bracketId: currentBracketId,
                        currentRound: roundToUse
                    })
                });

                const result = await nextRoundResponse.json();
                
                if (result.success) {
                    alert('Next round generated successfully!');
                    loadBracketMatches(currentBracketId);
                } else {
                    alert('Error generating next round: ' + result.error);
                }
            } catch (error) {
                console.error('Error generating next round:', error);
                alert('Error generating next round');
            }
        });

        // Check round completion
        document.getElementById('checkRoundCompletion')?.addEventListener('click', async function() {
            if (!currentBracketId) {
                alert('No bracket selected');
                return;
            }

            try {
                const response = await fetch(`/admin/schedule/bracket/${currentBracketId}/matches`);
                const data = await response.json();
                
                const matches = data.matches;
                const bracket = data.bracket;
                
                // Group matches by round
                const rounds = {};
                matches.forEach(match => {
                    if (!rounds[match.round_number]) {
                        rounds[match.round_number] = [];
                    }
                    rounds[match.round_number].push(match);
                });
                
                let message = `Tournament Status for ${bracket.event_name} - ${bracket.sport_type}\n\n`;
                
                Object.keys(rounds).forEach(roundNumber => {
                    const roundMatches = rounds[roundNumber];
                    const completed = roundMatches.filter(m => m.status === 'completed').length;
                    const total = roundMatches.length;
                    
                    message += `Round ${roundNumber}: ${completed}/${total} matches completed\n`;
                    
                    if (completed === total && completed > 0) {
                        message += `✅ Round ${roundNumber} is COMPLETED and ready for next round!\n`;
                    } else if (completed > 0) {
                        message += `⏳ Round ${roundNumber} is IN PROGRESS (${total - completed} matches remaining)\n`;
                    } else {
                        message += `❌ Round ${roundNumber} has NO RESULTS yet\n`;
                    }
                    message += '\n';
                });
                
                alert(message);
            } catch (error) {
                console.error('Error checking round completion:', error);
                alert('Error checking round completion');
            }
        });

        // Navigation buttons
        document.getElementById('backToSports')?.addEventListener('click', function() {
            document.getElementById('matchesSection').style.display = 'none';
            document.getElementById('sportsSection').style.display = 'block';
            resetSelection();
        });

        document.getElementById('backToBrackets')?.addEventListener('click', function() {
            document.getElementById('matchesSection').style.display = 'none';
            document.getElementById('teamsSection').style.display = 'block';
            this.style.display = 'none';
        });

        document.getElementById('createAnotherBracket')?.addEventListener('click', function() {
            document.getElementById('matchesSection').style.display = 'none';
            document.getElementById('teamsSection').style.display = 'block';
            document.getElementById('existingBracketsSection').style.display = 'none';
            document.getElementById('teamsSelectionSection').style.display = 'block';
            resetTeamSelection();
        });

        // Reset selection
        function resetSelection() {
            selectedEvent = null;
            selectedSport = null;
            selectedTeams = [];
            selectedBracketType = null;
            currentBracketId = null;
            existingBrackets = [];
        }

        function resetTeamSelection() {
            selectedTeams = [];
            selectedBracketType = null;
            currentBracketId = null;
            document.querySelectorAll('.team-card.selected').forEach(card => {
                card.classList.remove('selected');
            });
            document.getElementById('proceedToBracket').textContent = 'Proceed to Bracket Creation';
        }

        // Modal functions
        function openScheduleModal(matchId, team1Name, team2Name) {
            document.getElementById('scheduleMatchId').value = matchId;
            document.getElementById('scheduleModal').style.display = 'block';
        }

        function openResultModal(matchId, team1Id, team1Name, team2Id, team2Name) {
            document.getElementById('resultMatchId').value = matchId;
            document.getElementById('team1Name').textContent = team1Name + ' Score:';
            document.getElementById('team2Name').textContent = team2Name + ' Score:';
            
            const winnerSelect = document.getElementById('winnerTeam');
            winnerSelect.innerHTML = `
                <option value="">Select Winner</option>
                <option value="${team1Id}">${team1Name}</option>
                <option value="${team2Id}">${team2Name}</option>
            `;
            
            document.getElementById('resultModal').style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Form submissions
        document.getElementById('scheduleForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const matchId = document.getElementById('scheduleMatchId').value;
            const matchDate = document.getElementById('matchDate').value;
            const venue = document.getElementById('venue').value;
            
            try {
                const response = await fetch(`/admin/schedule/match/${matchId}/schedule`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        matchDate: matchDate,
                        venue: venue
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Schedule updated successfully!');
                    closeModal('scheduleModal');
                    loadBracketMatches(currentBracketId);
                } else {
                    alert('Error updating schedule');
                }
            } catch (error) {
                console.error('Error updating schedule:', error);
                alert('Error updating schedule');
            }
        });

        document.getElementById('resultForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const matchId = document.getElementById('resultMatchId').value;
            const team1Score = document.getElementById('team1Score').value;
            const team2Score = document.getElementById('team2Score').value;
            const winnerTeam = document.getElementById('winnerTeam').value;
            
            try {
                const response = await fetch(`/admin/schedule/match/${matchId}/result`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        team1Score: team1Score,
                        team2Score: team2Score,
                        winnerTeamId: winnerTeam
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Result updated successfully!');
                    closeModal('resultModal');
                    loadBracketMatches(currentBracketId);
                } else {
                    alert('Error updating result');
                }
            } catch (error) {
                console.error('Error updating result:', error);
                alert('Error updating result');
            }
        });

        // Set champion manually
        document.getElementById('setChampion')?.addEventListener('click', async function() {
            if (!currentBracketId) {
                alert('No bracket selected');
                return;
            }

            if (!confirm('Are you sure you want to manually set the champion? This should only be used if the automatic champion detection failed.')) {
                return;
            }

            try {
                const response = await fetch('/admin/schedule/set-champion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        bracketId: currentBracketId
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    alert(result.message || 'Champion set successfully!');
                    loadBracketMatches(currentBracketId);
                } else {
                    alert('Error setting champion: ' + result.error);
                }
            } catch (error) {
                console.error('Error setting champion:', error);
                alert('Error setting champion');
            }
        });

        // Your existing sidebar and other functions...
        let isSidebarOpen = false;

        function toggleNav() {
            const sidebar = document.getElementById("mySidebar");
            const content = document.querySelector(".dashboard-container");
            const sidebarBtn = document.querySelector(".sidebar-btn");

            if (isSidebarOpen) {
                sidebar.style.left = "-240px";  
                content.style.marginLeft = "0"; 
                sidebarBtn.innerHTML = "&#9776;"; 
            } else {
                sidebar.style.left = "0";  
                content.style.marginLeft = "0";  
                sidebarBtn.innerHTML = "&#9776;"; 
            }
            isSidebarOpen = !isSidebarOpen;  
        }
        
        // Toggle the team dropdown
        const teamDropdownBtn = document.querySelector('.team-dropdown-btn');
        const teamDropdownContent = document.querySelector('.team-dropdown-content');
        teamDropdownBtn.addEventListener('click', function() {
            teamDropdownBtn.classList.toggle('active');
            if (teamDropdownContent.style.display === "block") {
                teamDropdownContent.style.display = "none";
            } else {
                teamDropdownContent.style.display = "block";
            }
        });
        
        // Show the logout confirmation modal
        function showLogoutModal() {
            document.getElementById('logoutModal').style.display = 'block';
        }
        
        function hideLogoutModal() {
            document.getElementById('logoutModal').style.display = 'none';
        }
        
        document.getElementById('confirmLogout').addEventListener('click', function() {
            window.location.href = '/admin/logout';  
        });
        
        document.getElementById('cancelLogout').addEventListener('click', function() {
            hideLogoutModal(); 
        });
        
        //Success message 
        window.addEventListener("DOMContentLoaded", () => {
            const successAlert = document.querySelector(".alert-success");
            if (successAlert) {
                setTimeout(() => {
                    successAlert.style.transition = "opacity 0.5s ease";
                    successAlert.style.opacity = "0";
                    setTimeout(() => successAlert.remove(), 500);
                }, 1000);
            }
        });
        
        //admin profile dropdown
        document.addEventListener('DOMContentLoaded', () => {
            const profileContainer = document.getElementById('adminProfileContainer');
            const dropdownMenu = document.getElementById('adminDropdownMenu');
            let hideTimeout;

            profileContainer.addEventListener('click', function(e) {
            e.stopPropagation();
            dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
        });
        });
    </script>
</body>

</html>

